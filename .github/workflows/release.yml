name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - TARGET: x86_64-unknown-linux-gnu
          - TARGET: x86_64-unknown-linux-musl
          - TARGET: aarch64-unknown-linux-gnu
          - TARGET: aarch64-unknown-linux-musl
          - TARGET: armv7-unknown-linux-gnueabihf
    steps:
      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Update Toolchain
        run: rustup update nightly && rustup default nightly # Until edition 2024 becomes stable

      - name: Install Dependencies
        run: |
          sudo apt-get install -yqq crossbuild-essential-arm64 crossbuild-essential-armhf musl-tools
          cat >> ~/.cargo/config.toml <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF

      - uses: Swatinem/rust-cache@v2
        with:
          cache-targets: "true"
          cache-all-crates: "true"
          cache-bin: "true"
          cache-on-failure: "true"

      - name: Install rust target
        run: rustup target add ${{ matrix.target }}

      - name: Install cargo-edit
        run: cargo install -f --no-default-features --features "set-version" cargo-edit

      - name: Set version
        run: cargo set-version ${{ steps.get_version.outputs.VERSION }}

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.target }}

      - name: Package
        run: |
          executableName=servitor
          mkdir -p dist
          mv target/${{ matrix.target }}/release/$executableName dist/${executableName}-${VERSION}-${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: dist/
          if-no-files-found: error

  build-containers:
    name: Build and Push Container Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Lowercase IMAGE_NAME
        run: echo "IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.get_version.outputs.VERSION }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}

  create-release:
    name: Create Release
    needs: [build-binaries, build-containers]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Lowercase IMAGE_NAME
        run: echo "IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV

      - name: Download Release Binaries
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          path: ./dist/
          merge-multiple: true

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body: |
            Release ${{ steps.get_version.outputs.VERSION }}

            Docker images are available at:
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
          generate_release_notes: true
          files: ./dist/*
